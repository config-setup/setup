#!/usr/bin/env bash

# Detect OS
OS=$(uname -s | tr '[:upper:]' '[:lower:]')

# Detect Architecture
ARCH=$(uname -m)
case "$ARCH" in
x86_64) ARCH="amd64" ;;
armv7l) ARCH="arm" ;;
aarch64|arm64) ARCH="arm64" ;;
i386) ARCH="386" ;;
*)
  echo "Unsupported architecture: $ARCH"
  exit 1
  ;;
esac

command_exists() {
  command -v "$@" >/dev/null 2>&1
}

setup::download() {
  path=$1
  file=$(basename "$path")
  curl -fsSL https://raw.githubusercontent.com/config-setup/setup/refs/heads/main/"$file" -o "$path"
}

git::clone() {
  local repo_url=$1
  local repo_dir=$2

  if [ -d "$repo_dir" ]; then
    pushd "$repo_dir" &>/dev/null || exit
    echo "$repo_url $(git pull)"
    popd &>/dev/null || exit
  else
    echo "$repo_url $(git clone "$repo_url" "$repo_dir")"
  fi
}

# git::download() {
#   local repo_url=$1
#   local file=$2
#   local target_dir=$3
#
#   local latest_release=$(curl -s $repo_url | grep -oP '"tag_name": "\K[^"]+')
#   local download_url="$repo/releases/download/$ASDF_LATEST_RELEASE/asdf-$ASDF_LATEST_RELEASE-$OS-$ARCH.tar.gz"
#   curl -fsSL  | tar -xz -C ~/.local/bin/
# }

asdf::install() {

  local latest_release
  latest_release=$(curl -s https://api.github.com/repos/asdf-vm/asdf/releases/latest | grep -oP '"tag_name": "\K[^"]+')

  echo "ASDF Latest Release $latest_release"

  echo "https://github.com/asdf-vm/asdf/releases/download/$latest_release/asdf-$latest_release-$OS-$ARCH.tar.gz"

  curl "https://github.com/asdf-vm/asdf/releases/download/$latest_release/asdf-$latest_release-$OS-$ARCH.tar.gz" | tar -xz -C ~/.local/bin/
}

asdf::plugin::install() {
  local plugin=$1
  local version=${2:-latest}
  local asdf=~/.local/bin/asdf

  if [[ -z $(asdf plugin list | grep "$plugin") ]]; then
    asdf plugin add "$plugin"
  else
    asdf plugin update "$plugin" &> /dev/null
  fi

  if [[ -z $(asdf list "$plugin" | grep "$version") ]]; then
    asdf install "$plugin" "$version"
  fi

  asdf set --home "$plugin" "$version"
  echo "$plugin set to $(asdf list $plugin | grep \* | sed -e 's/ \*//')"


}

setup() {
  # ohmyzsh
  if [ -z "${ZSH}" ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  fi

  # config files
  setup::download ~/.zshrc

  # config flies in git
  git::clone https://github.com/config-setup/local-bin.git ~/.local/bin/
  git::clone https://github.com/config-setup/tmux.git ~/.config/tmux
  git::clone https://github.com/config-setup/nvim.git ~/.config/nvim
  git::clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

  # asdf
  
  asdf::install

  # asdf tools
  asdf::plugin::install jq
  asdf::plugin::install starship
  asdf::plugin::install neovim stable
  asdf::plugin::install lazydocker
  asdf::plugin::install lazygit
  asdf::plugin::install terraform
  asdf::plugin::install terragrunt
  asdf::plugin::install kubectl

  # asdf languages
  asdf::plugin::install python latest:3.12.7
  asdf::plugin::install nodejs
  asdf::plugin::install golang
  asdf::plugin::install rust

  # Python Packages
  python3 -m pip install -U pip ruff
}

setup::docker() {
  curl -fsSL https://get.docker.com | bash
}

case $1 in
docker) setup::docker ;;
*) setup ;;
esac
